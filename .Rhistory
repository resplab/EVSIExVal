x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
m <- 0.7
a1 <- 1
b1 <- a1*(1-m)/m
a2 <- 5
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
mean(pbeta(rbeta(1000,2,2)))
mean(pbeta(rbeta(1000,2,2),2,2))
mean(pbeta(rbeta(1000,20,2),2,2))
mean(pbeta(rbeta(1000,20,2),20,2))
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
m <- 0.7
a1 <- 1
b1 <- a1*(1-m)/m
a2 <- 5
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
a1
b1
m <- 0.4
a1 <- 3
b1 <- a1*(1-m)/m
a2 <- 5
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
mean(pbeta)
m <- 0.1
a1 <- 3
b1 <- a1*(1-m)/m
a2 <- 5
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
m <- 0.1
a1 <- 3
b1 <- a1*(1-m)/m
a2 <- 5
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
x <- (1:1000)/1001
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
m <- 0.1
a1 <- 3
b1 <- a1*(1-m)/m
a2 <- 5
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
beta
2*beta(s*a1,2*b1)/(a1+b1)/beta(a1,b1)^2
2*beta(2*a1,2*b1)/(a1+b1)/beta(a1,b1)^2
2*beta(2*a2,2*b2)/(a2+b2)/beta(a2,b2)^2
a1
b1
a2
b2
m <- 0.1
a1 <- 0.5
b1 <- a1*(1-m)/m
a2 <- 5
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
m <- 0.5
a1 <- 0.5
b1 <- a1*(1-m)/m
a2 <- 1
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
m <- 0.5
a1 <- 0.5
b1 <- a1*(1-m)/m
a2 <- 0.7
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
m <- 0.5
a1 <- 50
b1 <- a1*(1-m)/m
a2 <- 0.7
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
m <- 0.9
a1 <- 50
b1 <- a1*(1-m)/m
a2 <- 0.7
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
m <- 0.9
a1 <- 50
b1 <- a1*(1-m)/m
a2 <- 0.7
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
m <- 0.9
a1 <- 50
b1 <- a1*(1-m)/m
a2 <- 0.7
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
m <- 0.9
a1 <- 50
b1 <- a1*(1-m)/m
a2 <- 0.7
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
m <- 0.9
a1 <- 50
b1 <- a1*(1-m)/m
a2 <- 0.07
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
Y <- 2*x*dbeta(x,a1,b1)*pbeta(x,a1,b1)
Z <- 2*x*dbeta(x,a2,b2)*pbeta(x,a2,b2)
mean(pbeta(x,a1,b1))
mean(pbeta(x,a2,b2))
plot(pbeta(x,a1,b1)^1,type='l')
lines(pbeta(x,a2,b2)^1,col='red')
x
sum(pbeta(x,a1,b1))/length(x)
a1
b1
m <- 0.5
a1 <- 2
b1 <- a1*(1-m)/m
a2 <- 3
b2 <- a2*(1-m)/m
x <- (1:1000)/1001
sum(pbeta(x,a1,b1))/length(x)
sum(pbeta(x,a2,b3))/length(x)
sum(pbeta(x,a2,b2))/length(x)
m <- 0.6
a1 <- 2
b1 <- a1*(1-m)/m
a2 <- 3
b2 <- a2*(1-m)/m
sum(pbeta(x,a2,b2))/length(x)
sum(pbeta(x,a1,b1))/length(x)
beta(a1,b1)
f <-function(x) {x*pbeta(x,a1,b1)*beta(a1,b1) - pbeta(x,a1+1,b1)/beta(a1+1,b1)}
f(0.4)
f <-function(x) {x*pbeta(x,a1,b1)*beta(a1,b1) - pbeta(x,a1+1,b1)/beta(a1+1,b1)}
beta(1,1)
beta(2,1)
beta(2,1)
pbeta(0.9,2,1)*beta(2,1)
integrate(function(x) {x^1*(1-x)} , lower = 0, upper=1)
integrate(function(x) {x*(1-x)^0} , lower = 0, upper=1)
integrate(function(x,a=2,b=1) {x^(a-1)*(1-x)^(b-1)} , lower = 0, upper=1)
integrate(function(x,a=3,b=2) {x^(a-1)*(1-x)^(b-1)} , lower = 0, upper=1)
beta(3,2)
integrate(function(x,a=3,b=2) {x^(a-1)*(1-x)^(b-1)} , lower = 0, upper=0.4)
pbeta(0.4,3,2)
integrate(function(x,a=3,b=2) {x^(a-1)*(1-x)^(b-1) / beta(a,b)} , lower = 0, upper=0.4)
pbeta(0.4,3,2)
pbeta(0.4,3,2)*beta(3,2)
integrate(function(x,a=3,b=2) {x^(a-1)*(1-x)^(b-1)} , lower = 0, upper=0.4)
integrate(function(x,a=3,b=2) {x^(a-1)*(1-x)^(b-1)} , lower = 0, upper=0.4)
f <-function(x) {x*pbeta(x,a1,b1)*beta(a1,b1) - pbeta(x,a1+1,b1)/beta(a1+1,b1)}
f(0.4)
f <-function(x,a,b) {x*pbeta(x,a,b)*beta(a,b) - pbeta(x,a+1,b)/beta(a+1,b)}
f(0.4, 3,2)
integrate(function(x,a=3,b=2) {x^(a-1)*(1-x)^(b-1) / beta(a,b)} , lower = 0, upper=0.4)
integrate(function(x,a=3,b=2) {x^(a-1)*(1-x)^(b-1)} , lower = 0, upper=0.4)
pbeta(0.4,3,2)*beta(3,2)
f <-function(x,a,b) {x*pbeta(x,a,b)*beta(a,b) - pbeta(x,a+1,b)/beta(a+1,b)}
f(0)
f(0,3,2)
f(0.4)
f(0.4,3,2)
f <-function(x,a,b) {x*pbeta(x,a,b)*beta(a,b) - pbeta(x,a+1,b)*beta(a+1,b)}
f(0.4,3,2)
integrate(function(x,a=3,b=2) {pbeta(x,a,b)*beta(a,b)} , lower = 0, upper=0.4)
integrate(function(x,a=3,b=2) {pbeta(x,a,b)*beta(a,b)} , lower = 0, upper=0.4)
f
f(0.4,3,2)
a1
b1
a2
b2
a1/(a1+b1)
f(1,a1,b1)
f(1,a2,b3)
f(1,a2,b2)
integrate(function(x,a,b) {pbeta(x,a,b)}, 0,1)
integrate(function(x,a=a1,b=b1) {pbeta(x,a,b)}, 0,1)
integrate(function(x,a=a2,b=b2) {pbeta(x,a,b)}, 0,1)
integrate(function(x,a=a2,b=b2) {pbeta(x,a,b)}, 0,1)
ibeta <- function(x,a,b) {pbeta(x,a,b)*beta(a,b)}
ibeta(0.3,1,2)
integrate(ibeta(x,a1,b1),0,1)
integrate(function(x,a,b) {ibeta(x,a,b)},0,1)
integrate(function(x,a=a1,b=b1) {ibeta(x,a,b)},0,1)
z <- 0.4
integrate(function(x,a=a1,b=b1) {ibeta(x,a,b)},0,z)
z*ibeta(z,a1,b1)-ibeta(z,a1+1,b1)
iCDF <- function(x,a,b) {x*pbeta(x,a,b)*beta(a,b) - pbeta(x,a+1,b)*beta(a+1,b)}
iCDF(0.4,a1,b1)
integrate(function(x,a=a1,b=b1) {pbeta(x,a,b)}, 0,0.4 )
integrate(function(x,a=a1,b=b1) {pbeta(x,a,b)}, 0,0.4 )
m <- 0.6
a1 <- 2
b1 <- a1*(1-m)/m
a2 <- 3
b2 <- a2*(1-m)/m
iCDF(0.4,a1,b1)
integrate(function(x,a=a1,b=b1) {pbeta(x,a,b)}, 0,0.4 )
iCDF <- function(x,a,b) {x*pbeta(x,a,b)*beta(a,b) - pbeta(x,a+1,b)*beta(a+1,b)}
iCDF(0.4,a1,b1)
integrate(function(x,a=a1,b=b1){pbeta(x,a,b)},0,0.4)
pbeta(0.4,a1,b1)
pbeta(0.4,a1,b1)*beta(a1,b1)
iCDF <- function(x,a,b) {(x*pbeta(x,a,b)*beta(a,b) - pbeta(x,a+1,b)*beta(a+1,b))/beta(a,b)}
iCDF(0.4,a1,b1)
integrate(function(x,a=a1,b=b1){pbeta(x,a,b)},0,0.4)
iCDF <- function(x,a,b) {x*pbeta(x,a,b) - pbeta(x,a+1,b)*beta(a+1,b)/beta(a,b)}
iCDF(0.4,a1,b1)
iCDF <- function(x,a,b) {x*pbeta(x,a,b) - pbeta(x,a+1,b)*a/(a+b)}
iCDF(0.4,a1,b1)
iCDF(1,a1,b1)
a1
b1
library(evsiexval)
setwd("C:/Users/msafavi/static/GitRepos/EVSIExVal/analysis")
source("include.R")
settings <- list(
name="case_study",
output_dir="M:/Projects/2023/Project.EVSIexval/Output/Results/WIP/",
val_sample_size=c(500),
future_sample_sizes=c(500, 1000, 2000, 4000, 8000, 16000),
n_sim=10^6,  #Internal for VoI calculations
n_DCA_bs=10000, #Number of bootstraps for DCA 95%CI
zs=c(0.01,0.02)
)
out <- readRDS(paste0(settings$output_dir, "case_study.RDS"))
zs <- (0:10)/100
n <- dim(val_data)[1]
NBh_model <- NBh_all <- rep(0,length(zs))
for(i in 1:length(zs))
{
NBh_model[i] <- mean((val_data$pi>zs[i])*(val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))
NBh_all[i] <- mean((val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))
}
settings$n_DCA_bs
zs <- (0:10)/100
n <- dim(val_data)[1]
NBh_model <- NBh_all <- rep(0,length(zs))
for(i in 1:length(zs))
{
NBh_model[i] <- mean((val_data$pi>zs[i])*(val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))
NBh_all[i] <- mean((val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))
}
# And now uncertainty around it
bs_NBh_model <- bs_NBh_all <- matrix(0, nrow=settings$n_DCA_bs, ncol=length(zs))
for(i_sim in 1:settings$n_DCA_bs)
{
w <- voipred:::bootstrap(n)
for(i in 1:length(zs))
{
bs_NBh_model[i_sim,i] <- sum(w*(val_data$pi>zs[i])*(val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))/n
bs_NBh_all[i_sim,i] <- sum(w*(val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))/n
}
}
NBh_all <- colMeans(bs_NBh_all)
NBh_model <- colMeans(bs_NBh_model)
max_y <- max(0,NBh_all,NBh_model)
plot(zs, NBh_all, col='darkgray', type='l', lwd=2, ylim=c(0,max_y), xlab="Risk threshold (z)", ylab="Net benefit")
lines(zs, zs*0, col='lightgray', type='l', lwd=2)
lines(zs, NBh_model, col='blue4', type='l', lwd=2)
legend(0.06,0.085, legend=c("Treat none", "Using the model", "Treat all"), lty=c(1,1,1),  col=c("lightgray","blue4","darkgray"), lwd=c(2,2))
library(evsiexval)
setwd("C:/Users/msafavi/static/GitRepos/EVSIExVal/analysis")
source("include.R")
settings <- list(
name="case_study",
output_dir="M:/Projects/2023/Project.EVSIexval/Output/Results/WIP/",
val_sample_size=c(500),
future_sample_sizes=c(500, 1000, 2000, 4000, 8000, 16000),
n_sim=10^6,  #Internal for VoI calculations
n_DCA_bs=10000, #Number of bootstraps for DCA 95%CI
zs=c(0.01,0.02)
)
#out <- readRDS(paste0(settings$output_dir, "case_study.RDS"))
out <- list(settings=settings)
out$model_coeffs <- coefficients(model)
model_equation <- function(model, proper_coeff_names=NULL, ...) { # from https://stats.stackexchange.com/questions/63600/how-to-translate-the-results-from-lm-to-an-equation
format_args <- list(...)
model_coeff <- model$coefficients
if(is.null(proper_coeff_names))
{
coeff_names <- names(model_coeff)
}
else
{
coeff_names <- proper_coeff_names[names(model_coeff)]
}
format_args$x <- abs(model$coefficients)
model_coeff_sign <- sign(model_coeff)
model_coeff_prefix <- case_when(model_coeff_sign == -1 ~ " - ",
model_coeff_sign == 1 ~ " + ",
model_coeff_sign == 0 ~ " + ")
model_eqn <- paste(#model$family$link,"(",strsplit(as.character(model$call$formula), "~")[[2]],")" # 'y'
"logit(P(Y=1))=",
paste(if_else(model_coeff[1]<0, "- ", ""),
do.call(format, format_args)[1],
paste(model_coeff_prefix[-1],
do.call(format, format_args)[-1],
"",
coeff_names[-1],
sep = "", collapse = ""),
sep = ""))
return(model_eqn)
}
proper_coeff_names <- c("(Intercept)"="",
"age"="[age]",
"milocOther"="[AMI location other (vs. inferior)]",
"milocAnterior"="[AMI location anterior (v. inferior)]",
"pmiyes"="[previous AMI]",
"kill"="[AMI severity (Killip score)]",
"pmin(sysbp, 100)"="[min(blood pressure, 100)]",
"pulse"="[pulse]")
out$model_equation <- model_equation(model, proper_coeff_names, digits=3)
sample_size <- max(settings$val_sample_size)
if(!is.infinite(sample_size))
{
val_data <- val_data[sample(1:(dim(data_us)[1]),sample_size,F),]
}
i<-1
for(sample_size in settings$val_sample_size)
{
out$model_auc[i] <- pROC::auc(val_data$Y[1:sample_size],val_data$pi[1:sample_size])*1
i <- i+1
}
EVSI(model, val_data[1:500,] , z=0.02, NULL, n_sim=settings$n_sim, prior=list(prev=c(1,1), se=c(1,1), sp=c(1,1)))$EVPI
zs <- (0:10)/100
n <- dim(val_data)[1]
NBh_model <- NBh_all <- rep(0,length(zs))
for(i in 1:length(zs))
{
NBh_model[i] <- mean((val_data$pi>zs[i])*(val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))
NBh_all[i] <- mean((val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))
}
# And now uncertainty around it
bs_NBh_model <- bs_NBh_all <- matrix(0, nrow=settings$n_DCA_bs, ncol=length(zs))
for(i_sim in 1:settings$n_DCA_bs)
{
w <- voipred:::bootstrap(n)
for(i in 1:length(zs))
{
bs_NBh_model[i_sim,i] <- sum(w*(val_data$pi>zs[i])*(val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))/n
bs_NBh_all[i_sim,i] <- sum(w*(val_data$Y - (1-val_data$Y)*zs[i]/(1-zs[i])))/n
}
}
NBh_all <- colMeans(bs_NBh_all)
NBh_model <- colMeans(bs_NBh_model)
max_y <- max(0,NBh_all,NBh_model)
plot(zs, NBh_all, col='darkgray', type='l', lwd=2, ylim=c(0,max_y), xlab="Risk threshold (z)", ylab="Net benefit")
lines(zs, zs*0, col='lightgray', type='l', lwd=2)
lines(zs, NBh_model, col='blue4', type='l', lwd=2)
legend(0.06,0.085, legend=c("Treat none", "Using the model", "Treat all"), lty=c(1,1,1),  col=c("lightgray","blue4","darkgray"), lwd=c(2,2))
min_y <- min(0,NBh_all,NBh_model)
plot(zs, NBh_model - pmax(NBh_all,0), col='blue4', type='l', lwd=2, ylim=c(min_y,max_y), xlab="Risk threshold (z)", ylab="Net benefit")
ci <- apply(bs_NBh_model - pmax(bs_NBh_all,0),MARGIN = 2,FUN = quantile, c(0.025,0.975))
lines(zs,ci[1,], type='l', col='gray', lt=2)
lines(zs,ci[2,], type='l', col='gray', lt=2)
legend(0.035,0.085, legend=c("Incremental NB of the model","95% confidence interval"), lty=c(1,1),  col=c("blue4","gray"), lwd=c(2,2))
pdf(paste0(settings$output_dir,"DCA.pdf"), width=6, height=5)
plot(zs, NBh_all, col='darkgray', type='l', lwd=2, ylim=c(0,max_y), xlab="Risk threshold (z)", ylab="Net benefit")
lines(zs, zs*0, col='lightgray', type='l', lwd=2)
lines(zs, NBh_model, col='blue4', type='l', lwd=2)
# ci_model <- apply(bs_NBh_model,MARGIN = 2,FUN = quantile, c(0.025,0.975))
# lines(zs,ci_model[1,], type='l', col='gray', lt=2)
# lines(zs,ci_model[2,], type='l', col='gray', lt=2)
# ci_all <- apply(bs_NBh_all,MARGIN = 2,FUN = quantile, c(0.025,0.975))
# lines(zs,ci_all[1,], type='l', col='gray', lt=2)
# lines(zs,ci_all[2,], type='l', col='gray', lt=2)
legend(0.06,0.085, legend=c("Treat none", "Using the model", "Treat all"), lty=c(1,1,1),  col=c("lightgray","blue4","darkgray"), lwd=c(2,2))
#legend(0.0,0.022, legend=c("Default strategies*","Using the model","95% confidence interval"), lty=c(1,1,2),  col=c("gray","blue4","gray"), lwd=c(2,2,1))
dev.off()
pdf(paste0(settings$output_dir,"dNB.pdf"), width=6, height=5)
plot(zs, NBh_model - pmax(NBh_all,0), col='blue4', type='l', lwd=2, ylim=c(min_y,max_y), xlab="Risk threshold (z)", ylab="Net benefit")
ci <- apply(bs_NBh_model - pmax(bs_NBh_all,0),MARGIN = 2,FUN = quantile, c(0.025,0.975))
lines(zs,ci[1,], type='l', col='gray', lt=2)
lines(zs,ci[2,], type='l', col='gray', lt=2)
legend(0.035,0.085, legend=c("Incremental NB of the model","95% confidence interval"), lty=c(1,1),  col=c("blue4","gray"), lwd=c(2,2))
dev.off()
dev.off()
df <- EVPIs[which(EVPIs$val_size==settings$val_sample_size),]
out <- readRDS(paste0(settings$output_dir, "case_study.RDS"))
out$EVSIs$EVPI
zs <- c(0:10)/100
EVPIs <- data.frame(val_size=integer(), z=double(), EVPI=double())
i<-1
for(sample_size in settings$val_sample_size)
{
tmp <- c()
dt <- val_data[1:sample_size,]
for(z in zs)
{
evidence <- list(prev=c(sum(val_data$Y), nrow(val_data)-sum(val_data$Y)),
se=c(sum(val_data$Y*(val_data$pi>=z)),sum(val_data$Y)-sum(val_data$Y*(val_data$pi>=z))),
sp=c(sum((1-val_data$Y)*(val_data$pi<z)),sum(1-val_data$Y)-sum((1-val_data$Y)*(val_data$pi<z)))
)
EVPI <- EVSI_ag(evidence, z, NULL, n_sim=settings$n_sim, prior=list(prev=c(1,1), se=c(1,1), sp=c(1,1)))$EVPI
EVPIs[i,] <- c(sample_size, z, EVPI)
i <- i+1
cat(i)
}
}
df <- EVPIs[which(EVPIs$val_size==settings$val_sample_size),]
scale <- 1
max_y <- df$EVPI/scale*1.1
plot(zs, df$EVPI, type='l', xlab='Risk threshold (z)', ylab='EVPI', col='blue', lwd=2)
#title(paste(df$val_size, z))
y2 <- pretty(c(0,800000*df$EVPI))
axis(4, at=y2/800000, labels=y2)
mtext("Population EVSI", side=4, line=2)
df <- EVPIs[which(EVPIs$val_size==settings$val_sample_size),]
scale <- 1
max_y <- df$EVPI/scale*1.1
plot(zs, df$EVPI, type='l', xlab='Risk threshold (z)', ylab='EVPI', col='blue', lwd=2)
#title(paste(df$val_size, z))
y2 <- pretty(c(0,800000*df$EVPI))
axis(4, at=y2/800000, labels=y2)
mtext("Population EVSI", side=4, line=2)
par(mar=c(4, 4, 0, 3), xpd=TRUE)
df <- EVPIs[which(EVPIs$val_size==settings$val_sample_size),]
scale <- 1
max_y <- df$EVPI/scale*1.1
plot(zs, df$EVPI, type='l', xlab='Risk threshold (z)', ylab='EVPI', col='blue', lwd=2)
#title(paste(df$val_size, z))
y2 <- pretty(c(0,800000*df$EVPI))
axis(4, at=y2/800000, labels=y2)
mtext("Population EVPI", side=4, line=2)
pdf(paste0(settings$output_dir,"scaled_EVPI.pdf"))
par(mar=c(4, 4, 0, 3), xpd=TRUE)
df <- EVPIs[which(EVPIs$val_size==settings$val_sample_size),]
scale <- 1
max_y <- df$EVPI/scale*1.1
plot(zs, df$EVPI, type='l', xlab='Risk threshold (z)', ylab='EVPI', col='blue', lwd=2)
#title(paste(df$val_size, z))
y2 <- pretty(c(0,800000*df$EVPI))
axis(4, at=y2/800000, labels=y2)
mtext("Population EVPI", side=4, line=2)
dev.off()
