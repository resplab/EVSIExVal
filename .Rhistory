shiny::runApp('shiny')
runApp('shiny')
debugSource("C:/Users/msafavi/Static/GitRepos/EVSIExVal/shiny/core.R")
runApp('shiny')
table(apply(true_NBs,1,which.max))
runApp('shiny')
p_best
runApp('shiny')
runApp('shiny')
x <- table(cars)
x
cars
table(cars$speed)
x <- table(cars$speed)
x
as.matrix(x)
x
names(x)
source("C:/Users/msafavi/Static/GitRepos/EVSIExVal/shiny/core.R", echo=TRUE)
runApp('shiny')
colnames(p_best)
Q
runApp('shiny')
p_best
names(p_baes)
names(p_best)
as.data.frame(p_best)
class(p_best)
?frequency()
frequency(cars$speed)
p_best
runApp('shiny')
p_best
runApp('shiny')
runApp('shiny')
p_best
levels(p_best$Decision)
levels(p_best$Decision) <- c("2"="Model")
levels(p_best$Decision) <- c("2"="Model", "3"="All")
p_best
levels(p_best$Decision) <- c("2"="Model", "3"="All", "4"="ff")
p_best
runApp('shiny')
runApp('shiny')
library(tinytex)
tinytex::latexmk(..., clean = FALSE)
tinytex::latexmk(clean = FALSE)
options(tinytex.clean = FALSE)
setwd("C:/Users/msafavi/static/GitRepos/EVSIExVal/analysis")
source("include.R")
settings <- list(
name="case_study",
output_dir="M:/Projects/2023/Project.EVSIexval/Output/Results/WIP/",
future_sample_sizes=c(500, 1000, 2000, 4000, 8000, 16000),
val_sample_sizes=c(500, 1000, 2000, 4000, 8000, Inf),
n_sim=10, #This one is the outer sim. Inner sim numbers are EVSI() default (10^6)
zs=c(0.01,0.02)
)
out <- list()
out <- readRDS(paste0(settings$output_dir,"gusto_sim.RDS"))
EVSIs <- out$sim_results
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
z <- 0.01
y <- x[which(x$z==z),]
par(las=2)
plot(c(0,settings$future_sample_sizes), c(0,y[1,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='black', xlab="Future sample size", ylab="EVSI", lwd=2, xaxt = "n")
axis(1, at=settings$future_sample_sizes, labels=settings$future_sample_sizes)
lines(c(0,settings$future_sample_sizes), c(0,y[2,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='blue', lwd=2, lty=5)
lines(c(0,settings$future_sample_sizes), c(0,y[3,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='darkgreen', lwd=2, lty=2)
lines(c(0,settings$future_sample_sizes), c(0,y[4,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='orange', lwd=2, lty=4)
lines(c(0,settings$future_sample_sizes), c(0,y[5,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='darkred', lwd=2, lty=6)
lines(c(0,settings$future_sample_sizes), c(0,y[6,5:10]), type='l', ylim=c(0,max(y[,6:10])), col='red', lwd=2, lty=3)
#legend(-700, 1.03*max(y[,5:10]), legend=c("Development sample size\n", "500","1000","2000","4000","8000", paste0("n=",nrow(data_us))), lty=c(0, 1,5,2,4,6,3), col=c('white','black','blue','darkgreen','orange','darkred','red'), lwd=1, cex=0.6, bty="n")
legend(-700, 1.03*max(y[,5:10]), legend=c("Development sample sizes\n", "500","1000","2000","4000","8000"), lty=c(0,1,5,2,4,6), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
z <- 0.02
y <- x[which(x$z==z),]
par(las=2)
plot(c(0,settings$future_sample_sizes), c(0,y[1,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='black', xlab="Future sample size", ylab="EVSI", lwd=2, xaxt = "n")
axis(1, at=settings$future_sample_sizes, labels=settings$future_sample_sizes)
lines(c(0,settings$future_sample_sizes), c(0,y[2,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='blue', lwd=2, lty=5)
lines(c(0,settings$future_sample_sizes), c(0,y[3,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='darkgreen', lwd=2, lty=2)
lines(c(0,settings$future_sample_sizes), c(0,y[4,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='orange', lwd=2, lty=4)
lines(c(0,settings$future_sample_sizes), c(0,y[5,5:10]), type='l', ylim=c(0,max(y[,5:10])), col='darkred', lwd=2, lty=6)
lines(c(0,settings$future_sample_sizes), c(0,y[6,5:10]), type='l', ylim=c(0,max(y[,6:10])), col='red', lwd=2, lty=3)
#legend(-700, 1.03*max(y[,5:10]), legend=c("Development sample size\n", "500","1000","2000","4000","8000", paste0("n=",nrow(data_us))), lty=c(0, 1,5,2,4,6,3), col=c('white','black','blue','darkgreen','orange','darkred','red'), lwd=1, cex=0.6, bty="n")
legend(-700, 1.03*max(y[,5:10]), legend=c("Development sample size\n", "500","1000","2000","4000","8000"), lty=c(0,1,5,2,4,6), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
fss <- settings$future_sample_sizes[1:4] #AV doesn't like anything above 4000
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
k <- 1000
par(mar=c(4, 4, 4, 1), xpd=TRUE)
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
shiny::runApp('shiny')
install.packages("Rcpp")
remove.packages("Rcpp")
remove.packages("Rcpp")
install.packages("Rcpp")
library(evsiexval)
shiny::runApp('shiny')
logit <- function(x) {log(x/(1-x))}
expit <- function(x) {1/(1+exp(-x))}
pdf <- function(x, mu, sigme) {1/sigma/sqrt(2*pi)/x/(1-x)*exp(-(logit(x)-mu)^2/(2*sigma^2))}
cdf <- function(x, mu, sigme) {pnorm(logit(x),mu,sigma)}
mu <- 2
sigma <- 10
x <- (1:1000)/1001
plot(x, pdf(x,mu,sigma), type='l')
plot(x, cdf(x,mu,sigma), type='l')
n <- 10^7
x<-rnorm(n,mu,sigma)
mean(1/(1+exp(-(x))))
rm(x)
K <- 10000
i <- 1:(K-1)
sum(expit(qnorm(i/K,mu,sigma)))/(K-1)
1-integrate(cdf,0,1,mu,sigma)$value
logit <- function(x) {log(x/(1-x))}
expit <- function(x) {1/(1+exp(-x))}
pdf <- function(x, mu, sigme) {1/sigma/sqrt(2*pi)/x/(1-x)*exp(-(logit(x)-mu)^2/(2*sigma^2))}
cdf <- function(x, mu, sigme) {pnorm(logit(x),mu,sigma)}
mu <- 2
sigma <- 10
x <- (1:1000)/1001
plot(x, pdf(x,mu,sigma), type='l')
plot(x, cdf(x,mu,sigma), type='l')
n <- 10^7
x<-rnorm(n,mu,sigma)
mean(1/(1+exp(-(x))))
rm(x)
K <- 10000
i <- 1:(K-1)
sum(expit(qnorm(i/K,mu,sigma)))/(K-1)
1-integrate(cdf,0,1,mu,sigma)$value
integrate(function(x,mu,sigma){x*pdf(x,mu,sigma)},0,1,mu,sigma)$value
plot(x, pdf(x,mu,sigma), type='l')
x <- (1:1000)/1001
plot(x, pdf(x,mu,sigma), type='l')
mu <- 1
sigma <- 10
x <- (1:1000)/1001
plot(x, pdf(x,mu,sigma), type='l')
plot(x, cdf(x,mu,sigma), type='l')
K <- 10000
i <- 1:(K-1)
sum(expit(qnorm(i/K,mu,sigma)))/(K-1)
1-integrate(cdf,0,1,mu,sigma)$value
integrate(function(x,mu,sigma){x*pdf(x,mu,sigma)},0,1,mu,sigma)$value
mu <- 1
sigma <- 20
x <- (1:1000)/1001
plot(x, pdf(x,mu,sigma), type='l')
plot(x, cdf(x,mu,sigma), type='l')
K <- 10000
i <- 1:(K-1)
sum(expit(qnorm(i/K,mu,sigma)))/(K-1)
1-integrate(cdf,0,1,mu,sigma)$value
integrate(function(x,mu,sigma){x*pdf(x,mu,sigma)},0,1,mu,sigma)$value
C
c <- 1
c
c(1,2,3)
m <- 0.4
c <- 0.7
m <- 0.4
c <- 0.7
F <- 1-m
D <- sqrt((1-2*c)*m*m - (1-2*c)*m + 0.25)
D
m-0.5+D
c(m-0.5+D, m-0.5-D)
m <- 0.4
c <- 0.7
F <- 1-m
D <- sqrt((1-2*c)*m*m - (1-2*c)*m + 0.25)
c(m-0.5+D, m-0.5-D)
m
F1 <- 1-m
F2 <- 1-c(m-0.5+D, m-0.5-D)
F1
F2
F2 <- 1-c(m-0.5+D, m-0.5-D)[1]
F2
F1
?optim
m <- 0.4
c <- 0.7
F1 <- 1-m
D <- sqrt((1-2*c)*m*m - (1-2*c)*m + 0.25)
F2 <- 1-c(m-0.5+D, m-0.5-D)[1]
pdf <- function(x, mu, sigme) {1/sigma/sqrt(2*pi)/x/(1-x)*exp(-(logit(x)-mu)^2/(2*sigma^2))}
cdf <- function(x, mu, sigme) {pnorm(logit(x),mu,sigma)}
cdf2 <- function(x, mu, sigme) {pnorm(logit(x),mu,sigma)^2}
f <- function(x, F1, F2)
{
f1 <- integrate(cdf,0,1,mu=x[1],sigma=x[2])
f2 <- integrate(cdf2,0,1,mu=x[1],sigma=x[2])
(f1-F1)^2+(f2-F2)^2
}
optim(c(0,1), f)
f <- function(x)
{
f1 <- integrate(cdf,0,1,mu=x[1],sigma=x[2])
f2 <- integrate(cdf2,0,1,mu=x[1],sigma=x[2])
(f1-F1)^2+(f2-F2)^2
}
optim(c(0,1), f)
f <- function(x)
{
f1 <- integrate(cdf,0,1,mu=x[1],sigma=x[2])
f2 <- integrate(cdf2,0,1,mu=x[1],sigma=x[2])
(f1-F1)^2+(f2-F2)^2
}
optim(c(0,1), f)
pdf <- function(x, mu, sigma) {1/sigma/sqrt(2*pi)/x/(1-x)*exp(-(logit(x)-mu)^2/(2*sigma^2))}
cdf <- function(x, mu, sigma) {pnorm(logit(x),mu,sigma)}
cdf2 <- function(x, mu, sigma) {pnorm(logit(x),mu,sigma)^2}
f <- function(x)
{
f1 <- integrate(cdf,0,1,mu=x[1],sigma=x[2])
f2 <- integrate(cdf2,0,1,mu=x[1],sigma=x[2])
(f1-F1)^2+(f2-F2)^2
}
optim(c(0,1), f)
f <- function(x)
{
f1 <- integrate(cdf,0,1,mu=x[1],sigma=x[2])$value
f2 <- integrate(cdf2,0,1,mu=x[1],sigma=x[2])$value
(f1-F1)^2+(f2-F2)^2
}
optim(c(0,1), f)
logit <- function(x) {log(x/(1-x))}
expit <- function(x) {1/(1+exp(-x))}
pdf <- function(x, mu, sigma) {1/sigma/sqrt(2*pi)/x/(1-x)*exp(-(logit(x)-mu)^2/(2*sigma^2))}
cdf <- function(x, mu, sigma) {pnorm(logit(x),mu,sigma)}
mu <- -0.4515322
sigma <- 0.7134626
x <- (1:1000)/1001
plot(x, pdf(x,mu,sigma), type='l')
plot(x, cdf(x,mu,sigma), type='l')
n <- 10^7
x<-rnorm(n,mu,sigma)
mean(1/(1+exp(-(x))))
rm(x)
K <- 10000
i <- 1:(K-1)
sum(expit(qnorm(i/K,mu,sigma)))/(K-1)
1-integrate(cdf,0,1,mu,sigma)$value
integrate(function(x,mu,sigma){x*pdf(x,mu,sigma)},0,1,mu,sigma)$value
1-integrate(cdf,0,1,mu,sigma)$value
source("C:/Users/msafavi/static/GitRepos/EVSIExVal/analysis/new_mapper.R")
res_logitnormal <- solve_logitnormal(c(m,c))
res_probitnormal <- solve_probitnormal3(c(m,c))
res_beta <- solve_beta2(c(m,c))
