devtools::document()
remove.packages("EVSIExVal")
remove.packages("EVSIExVal")
detach("pkg:EVSIExVal")
?detach("pkg:EVSIExVal")
?detach("package:EVSIExVal")
detach("package:EVSIExVal")
detach("package:EVSIExVal", character.only = T)
detach(package:EVSIExVal)
detach(package:splines)
shiny::runApp('shiny')
remove.packages("EVSIexVal")
;lk;lk
library(EVSIExval)
devtools::install_github("https://github.com/resplab/EVSIExVal")
devtools::install_github("https://github.com/resplab/EVSIExVal", auth_token = "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")
devtools::install_github("https://github.com/resplab/EVSIExVal", auth_token = "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")
devtools::install_github("https://github.com/resplab/EVSIExVal", auth_token = "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")
library(EVSIExval)
EVSIExval::EVSI_gf()
library(EVSIExval)
devtools::document()
library(EVSIExval)
EVSIExval:::CEVSI
library(EVSIExval)
EVSIExval:::CEVSI
EVSIExval:::CEVSI()
devtools::document()
unloadNamespace("EVSIExVal")
unloadNamespace("EVSIExVal")
library(EVSIExval)
EVSIExval::CEVSI()
EVSIExval:::CEVSI()
devt
devtools::document()
remove.package
remove.packages
remove.packages("EVSIExVal")
remove.packages("EVSIExVal")
library(evsiexval)
shiny::runApp('shiny')
evidence
n_sim_outer
n_sim_inner
evidence$params
n_stars
VoI
z
EVSI_ag
EVSI_ag()
EVSI_ag(z=0.5)
EVSI_ag(z=0.5, future_sample_sizes = 500, n_sim = )
EVSI_ag(z=0.5, future_sample_sizes = 500, n_sim=1)
EVSI_ag(z=0.5, future_sample_sizes = 500, n_sim=2)
runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
global_vars$evidence_type
runApp('shiny')
runApp('shiny')
runApp('shiny')
library(evsiexval)
shiny::runApp('shiny')
runApp('shiny')
cur_NBs
shiny::runApp('shiny')
library(evsiexval)
runApp('shiny')
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
dim(pop_data)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
library(evsiexval)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
cur_NB_CIs
shiny::runApp('shiny')
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
t(cur_NB_CIs)
p_best
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
cur_NBs
cur_NBs <- cbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs <- rbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs
cur_NBs <- cbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs
cur_NBs <- cbind("Treat none"=0,
mean("Use model"=true_NBs[,2]),
mean("Treat all"=true_NBs[,3])
)
cbind("Treat none"=0,
mean("Use model"=true_NBs[,2]),
mean("Treat all"=true_NBs[,3])
)
true_NBs
colMeans(true_NBs)
cur_NBs <- colMeans(true_NBs)
cur_NBs
rbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs <- rbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs
p_best <- table(apply(true_NBs,1,which.max))/nrow(true_NBs)
p_best
cur_NBs[nrow("cur_NBs")+1,] <- 0
cur_NBs
nrow("cur_NBs")
cur_NBs[nrow(cur_NBs)+1,] <- 0
library(evsiexval)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
library(evsiexval)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
shiny::runApp('shiny')
shiny::runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
?removeUI
runApp('shiny')
runApp('shiny')
runApp('shiny')
observeEvent(input$prev, input$se, input$sp, {
if(global_vars$evidence_type=="ind_beta")
{
a <- input$prev/100*input$prev_n
b <- input$prev_n-input$prev/100*input$prev_n
output$prev_dist <- renderText(paste0("prev~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
a <- input$se/100*input$se_n
b <- input$se_n-input$se/100*input$se_n
output$se_dist <- renderText(paste0("se~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
a <- input$sp/100*input$sp_n
b <- input$sp_n-input$sp/100*input$prev_n
output$sp_dist <- renderText(paste0("sp~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
}
})
runApp('shiny')
a
b
input$se
output$se_dist
output$
;
renderText(paste0("sp~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
renderText(paste0("sp~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))()
output$prev_dist
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
global_vars$evidence_type
input$prev
?try
runApp('shiny')
runApp('shiny')
runApp('shiny')
input$
cstat
runApp('shiny')
runApp('shiny')
global_vars$evidence
global_vars$evidence_type
input$prev
input$prev
global_vars$evidence_type
runApp('shiny')
runApp('shiny')
runApp('shiny')
global_vars$oe
global_vars$oe$destroy()
global_vars$oe$destroy()
global_vars$oe$destroy()
global_vars$oe$.domain
global_vars$oe$.suspended
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
library(evsiexval)
shiny::runApp('shiny')
library(evsiexval)
shiny::runApp('shiny')
setwd("C:/Users/msafavi/static/GitRepos/EVSIExVal/analysis")
source("include.R")
settings <- list(
name="case_study",
output_dir="M:/Projects/2023/Project.EVSIexval/Output/Results/WIP/",
future_sample_sizes=c(500, 1000, 2000, 4000, 8000, 16000),
val_sample_sizes=c(500, 1000, 2000, 4000, 8000, Inf),
n_sim=10, #This one is the outer sim. Inner sim numbers are EVSI() default (10^6)
zs=c(0.01,0.02)
)
out <- list()
out <- readRDS(paste0(settings$output_dir,"gusto_sim.RDS"))
EVISs <- out$sim_results
EVSIs
EVSIs <- out$sim_results
head(EVSIs)
y <- sqldf("SELECT* FROM x ORDER BY z, val_sample")
y <- sqldf("SELECT* FROM EVSIs ORDER BY z, val_sample")
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
View(EVSIs)
View(EVSIs)
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
y$i <-0
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
y$i <-0
cur_z <- 0; cur_val_size <-0
for(i in 1:nrow(y))
{
if(y$z[i]==cur_z & y$val_size[i]==cur_val_size)
{
index <- index+1
}
else
{
index <- 1
}
y$i[i] <- index
}
y
View(y)
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
y$i <-0
cur_z <- 0; cur_val_size <-0
for(i in 1:nrow(y))
{
if(y$z[i]==cur_z & y$val_size[i]==cur_val_size)
{
index <- index+1
}
else
{
index <- 1
}
y$i[i] <- index
}
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
y$i <-0
cur_z <- 0; cur_val_size <-0
for(i in 1:nrow(y))
{
if(y$z[i]==cur_z & y$val_size[i]==cur_val_size)
{
index <- index+1
}
else
{
index <- 1
}
y$i[i] <- index
}
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
y$i <-0
cur_z <- 0; cur_val_size <-0
for(i in 1:nrow(y))
{
if(y$z[i]==cur_z & y$val_size[i]==cur_val_size)
{
index <- index+1
}
else
{
index <- 1
}
y$i[i] <- index
}
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
y$i <-0
cur_z <- 0; cur_val_size <-0
for(i in 1:nrow(y))
{
if(y$z[i]==cur_z & y$val_size[i]==cur_val_size)
{
index <- index+1
}
else
{
index <- 1
}
y$i[i] <- index
}
y <- sqldf("SELECT * FROM EVSIs ORDER BY z, val_size")
y$i <-0
cur_z <- 0; cur_val_size <-0
for(i in 1:nrow(y))
{
if(y$z[i]==cur_z & y$val_size[i]==cur_val_size)
{
index <- index+1
}
else
{
index <- 1
cur_z <- y$z[i]
cur_val_size <- y$val_size[i]
}
y$i[i] <- index
}
View(y)
y <- y[-which(y$i>100),]
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM y GROUP BY val_size, z")
View(x)
fss <- settings$future_sample_sizes[1:4] #AV doesn't like anything above 4000
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
k <- 1000
par(mar=c(4, 4, 4, 1), xpd=TRUE)
pdf(paste0(settings$output_dir,"EVSI_sim_v2.pdf"), width=7, height=5)
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
axis(1, at=c(0,fss), labels=c(0,fss))
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1)
z <- 0.01
y <- x[which(x$z==z),6:9]
lines(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max(k*y[1,])), col='black', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1, lty=2)
legend("topleft", inset=c(0,0), horiz=F,  legend=c("Development sample size", "500","1000","2000","4000","8000"), lty=c(0,1,1,1,1,1), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
legend(x=1000, y=max_y*1.04, horiz=T,  legend=c("Threshold (z)", "0.01","0.02"), lty=c(0,2,1), col=c('white','black','black'), lwd=1, cex=0.6, bty="n")
dev.off()
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
axis(1, at=c(0,fss), labels=c(0,fss))
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1)
z <- 0.01
y <- x[which(x$z==z),6:9]
lines(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max(k*y[1,])), col='black', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1, lty=2)
legend("topleft", inset=c(0,0), horiz=F,  legend=c("Development sample size", "500","1000","2000","4000","8000"), lty=c(0,1,1,1,1,1), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
legend(x=1000, y=max_y*1.04, horiz=T,  legend=c("Threshold (z)", "0.01","0.02"), lty=c(0,2,1), col=c('white','black','black'), lwd=1, cex=0.6, bty="n")
pdf(paste0(settings$output_dir,"EVSI_sim_v2.pdf"), width=9, height=6)
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
axis(1, at=c(0,fss), labels=c(0,fss))
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1)
z <- 0.01
y <- x[which(x$z==z),6:9]
lines(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max(k*y[1,])), col='black', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1, lty=2)
legend("topleft", inset=c(0,0), horiz=F,  legend=c("Development sample size", "500","1000","2000","4000","8000"), lty=c(0,1,1,1,1,1), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
legend(x=1000, y=max_y*1.04, horiz=T,  legend=c("Threshold (z)", "0.01","0.02"), lty=c(0,2,1), col=c('white','black','black'), lwd=1, cex=0.6, bty="n")
dev.off()
###New graph (2023.12.29)
fss <- settings$future_sample_sizes[1:4] #AV doesn't like anything above 4000
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
k <- 1000
par(mar=c(4, 4, 4, 1), xpd=TRUE)
pdf(paste0(settings$output_dir,"EVSI_sim_v2.pdf"), width=9, height=6)
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
axis(1, at=c(0,fss), labels=c(0,fss))
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1)
z <- 0.01
y <- x[which(x$z==z),6:9]
lines(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max(k*y[1,])), col='black', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1, lty=2)
legend("topleft", inset=c(0,0), horiz=F,  legend=c("Development sample size", "500","1000","2000","4000","8000"), lty=c(0,1,1,1,1,1), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
legend(x=1000, y=max_y*1.04, horiz=T,  legend=c("Threshold (z)", "0.01","0.02"), lty=c(0,2,1), col=c('white','black','black'), lwd=1, cex=0.6, bty="n")
dev.off()
###New graph (2023.12.29)
fss <- settings$future_sample_sizes[1:4] #AV doesn't like anything above 4000
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
k <- 1000
par(mar=c(4, 4, 4, 1), xpd=TRUE)
pdf(paste0(settings$output_dir,"EVSI_sim_v2.pdf"), width=9, height=6)
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
axis(1, at=c(0,fss), labels=c(0,fss))
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1)
z <- 0.01
y <- x[which(x$z==z),6:9]
lines(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max(k*y[1,])), col='black', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1, lty=2)
legend("topleft", inset=c(0,0), horiz=F,  legend=c("Development sample size", "500","1000","2000","4000","8000"), lty=c(0,1,1,1,1,1), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
legend(x=1000, y=max_y*1.04, horiz=T,  legend=c("Threshold (z)", "0.01","0.02"), lty=c(0,2,1), col=c('white','black','black'), lwd=1, cex=0.6, bty="n")
dev.off()
###New graph (2023.12.29)
fss <- settings$future_sample_sizes[1:4] #AV doesn't like anything above 4000
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
k <- 1000
par(mar=c(4, 4, 4, 1), xpd=TRUE)
pdf(paste0(settings$output_dir,"EVSI_sim_v2.pdf"), width=8, height=6)
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
axis(1, at=c(0,fss), labels=c(0,fss))
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1)
z <- 0.01
y <- x[which(x$z==z),6:9]
lines(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max(k*y[1,])), col='black', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1, lty=2)
legend("topleft", inset=c(0,0), horiz=F,  legend=c("Development sample size", "500","1000","2000","4000","8000"), lty=c(0,1,1,1,1,1), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
legend(x=1000, y=max_y*1.04, horiz=T,  legend=c("Threshold (z)", "0.01","0.02"), lty=c(0,2,1), col=c('white','black','black'), lwd=1, cex=0.6, bty="n")
dev.off()
###New graph (2023.12.29)
fss <- settings$future_sample_sizes[1:4] #AV doesn't like anything above 4000
x <- sqldf("SELECT COUNT(*) AS N, val_size, z, AVG(EVPI) AS evpi, AVG(EVSI1) AS val1, AVG(EVSI2) AS val2, AVG(EVSI3) AS val3, AVG(EVSI4) AS val4, AVG(EVSI5) AS val5, AVG(EVSI6) AS val6 FROM EVSIs GROUP BY val_size, z")
k <- 1000
par(mar=c(4, 4, 4, 1), xpd=TRUE)
pdf(paste0(settings$output_dir,"EVSI_sim_v2.pdf"), width=7, height=5)
z <- 0.02
y <- x[which(x$z==z),6:9]
max_y <- max(k*y[1,])
plot(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max_y), col='black', xlab="Future sample size", ylab="EVSI (X1000)", lwd=1, xaxt = "n")
axis(1, at=c(0,fss), labels=c(0,fss))
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1)
z <- 0.01
y <- x[which(x$z==z),6:9]
lines(c(0,fss), c(0,k*y[1,]), type='l', ylim=c(0,max(k*y[1,])), col='black', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[2,]), type='l', ylim=c(0,max(k*y[2,])), col='blue', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[3,]), type='l', ylim=c(0,max(k*y[3,])), col='darkgreen', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[4,]), type='l', ylim=c(0,max(k*y[4,])), col='orange', lwd=1, lty=2)
lines(c(0,fss), c(0,k*y[5,]), type='l', ylim=c(0,max(k*y[5,])), col='darkred', lwd=1, lty=2)
legend("topleft", inset=c(0,0), horiz=F,  legend=c("Development sample size", "500","1000","2000","4000","8000"), lty=c(0,1,1,1,1,1), col=c('white','black','blue','darkgreen','orange','darkred'), lwd=1, cex=0.6, bty="n")
legend(x=1000, y=max_y*1.04, horiz=T,  legend=c("Threshold (z)", "0.01","0.02"), lty=c(0,2,1), col=c('white','black','black'), lwd=1, cex=0.6, bty="n")
dev.off()
