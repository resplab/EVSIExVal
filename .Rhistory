{
pdf(paste0(settings$output_dir,"EVSI_",sample_size,"_",z,".pdf"), width=7, height=5)
df <- sqldf(paste("SELECT * FROM EVSIs WHERE z=",z," AND val_size=",sample_size))
max_y <- max(df$EVPI)
par(las=2)
plot(c(0,settings$future_sample_sizes), c(0,df[1,evsi_cols]), type='l', ylim=c(0,max_y), xlab="Future sample size", ylab="EVSI", col=my_colors[i], xaxt="n")
axis(1, at=settings$future_sample_sizes, labels=settings$future_sample_sizes)
#title(paste(df$val_size, z))
lines(c(0,max(settings$future_sample_sizes)), c(df[1,'EVPI'],df[1,'EVPI']), col='gray')
dev.off()
i <- i+1
}
}
z <- 0.02
sample_size <- 500
df <- sqldf(paste("SELECT * FROM EVSIs WHERE z=",z," AND val_size=",sample_size))
scale <- 1 #df$EVPI
max_y <- df$EVPI/scale*1.1
pdf(paste0(settings$output_dir,"scaled_EVSI_",sample_size,"_",z,".pdf"))
plot(c(0,settings$future_sample_sizes), c(0,unlist(df[1,evsi_cols]))/scale, type='l', ylim=c(0,max_y), xlab="Future sample size", ylab="EVSI", col='red')
#title(paste(df$val_size, z))
lines(c(0,max(settings$future_sample_sizes)), c(df$EVPI/scale,df$EVPI/scale), col='gray')
y2 <- pretty(c(0,800000*df$EVPI))
axis(4, at=y2/800000, labels=y2)
dev.off()
z <- 0.01
sample_size <- 500
df <- sqldf(paste("SELECT * FROM EVSIs WHERE z=",z," AND val_size=",sample_size))
scale <- 1 #df$EVPI
max_y <- df$EVPI/scale*1.1
pdf(paste0(settings$output_dir,"scaled_EVSI_",sample_size,"_",z,".pdf"))
plot(c(0,settings$future_sample_sizes), c(0,unlist(df[1,evsi_cols]))/scale, type='l', ylim=c(0,max_y), xlab="Future sample size", ylab="EVSI", col='red')
#title(paste(df$val_size, z))
lines(c(0,max(settings$future_sample_sizes)), c(df$EVPI/scale,df$EVPI/scale), col='gray')
y2 <- pretty(c(0,800000*df$EVPI))
axis(4, at=y2/800000, labels=y2)
dev.off()
my_colors <- c('blue','red')
for(z in settings$zs)
{
i <- 1
for(sample_size in settings$val_sample_size)
{
df <- sqldf(paste("SELECT * FROM EVSIs WHERE z=",z," AND val_size=",sample_size))
max_y <- max(df$EVPI)
pdf(paste0(settings$output_dir,"EVSI_",sample_size,"_",z,".pdf"), width=7, height=5)
plot(c(0,settings$future_sample_sizes), c(0,df[1,4:9]), type='l', ylim=c(0,max_y), xlab="Future sample size", ylab="EVSI", col=my_colors[i])
#title(paste(df$val_size, z))
lines(c(0,max(settings$future_sample_sizes)), c(df[1,'EVPI'],df[1,'EVPI']), col='gray')
dev.off()
i <- i+1
}
}
entities <- list()
entities$n_full_dev <- nrow(dev_data)
entities$n_full_val <- nrow(data_us)
entities$prev_full_dev <- mean(dev_data$day30)
entities$prev_full_val <- mean(data_us$day30)
entities$prev_val <- mean(val_data$day30)
EVPI_02 <- as.numeric(out$EVSIs %>% filter(z==0.02 & val_size==min(settings$val_sample_size)) %>% select(EVPI))
entities$EVPI_02 <- EVPI_02
EVSI_02 <- as.numeric(out$EVSIs %>% filter(z==0.02 & val_size==min(settings$val_sample_size)) %>% select(EVSI2))
entities$EVSI_02 <- EVSI_02
EVPI_01 <- as.numeric(out$EVSIs %>% filter(z==0.01 & val_size==min(settings$val_sample_size)) %>% select(EVPI))
entities$EVPI_01 <- EVPI_01
EVSI_01 <- as.numeric(out$EVSIs %>% filter(z==0.01 & val_size==min(settings$val_sample_size)) %>% select(EVSI2))
entities$EVSI_01 <- EVSI_01
out$entities <- entities
saveRDS(out,paste0(settings$output_dir, "case_study.RDS"))
print(paste("Results saved at", settings$output_dir))
source("include.R")
val_data <- val_data[sample(1:(dim(data_us)[1]),500,F),]
tt <- t.test(val_data$Y)
prev <- c(point=tt$estimate, upper_ci=tt$conf.int[2])
require(pROC)
tt <- roc(val_data$Y~val_data$pi, ci=T)
cs <- c(point=tt$auc, upper_ci=tt$ci[3])
val_data$lpi <- log(val_data$pi/(1-val_data$pi))
reg <- glm(Y~lpi, data=val_data, family=binomial(link="logit"))
tmp <- summary(reg)
A <- c(point=tmp$coefficients[1,1], sd=tmp$coefficients[1,2])
B <- c(point=tmp$coefficients[2,1], sd=tmp$coefficients[2,2])
z <- 0.02
samples <- gen_triplets(1000, z, prev, cs, A, B)
devtools::document()
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
library(EVSIExval)
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
mu <- 0;
signma <- 1
integrate(function(x) {dnorm(x,mu,sigma)/(1+exp(-x))}, lower=mu-4, upper=4)
mu <- 0;
signma <- 1
integrate(function(x) {dnorm(x,mu,sigma)/(1+exp(-x))}, lower=mu-4, upper=mu+4)
function(x) {dnorm(x,mu,sigma)/(1+exp(-x))}
integrate(function(x) {dnorm(x,mu,sigma)/(1+exp(-x))}, lower=mu-4, upper=mu+4)
?dnorm
dnorm
integrate(function(x) {x^2}, lower=mu-4, upper=mu+4)
res <- integrate(function(x) {x^2}, lower=mu-4, upper=mu+4)
res$value
mu <- 0;
sigma <- 1
res <- integrate(function(x) {dnorm(x,mean=mu,sd=sigma)/(1+exp(-x))}, lower=mu-4, upper=mu+4)
res
install.packages(greybox)
install.packages("greybox")
library(greybox)
library(greybox)
.libPaths()
install.packages(c("cli", "stringi"))
install.packages(c("cli", "stringi"))
install.packages(c("cli", "stringi"))
install.packages("cli")
install.packages("cli")
shiny::runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
evidence()
evidence
z
n_sim
future_sample_sizes
n_stars
EVSIs
VoI
EVSI_ag(evidence, z, n_sim=n_sim, future_sample_sizes=n_stars[-1])
evidence
EVSI_ag
EVSI_ag(evidence, z, n_sim=n_sim, future_sample_sizes=n_stars[-1])
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
input$evidence_type
input$evidence_type
?input$evidence_type
class(input$evidence_type)
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
substring(input$evidence_type,1,1)
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
construct_evidence()
input$prev2
input$prev
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
evidece_type
input$prev
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
input$prev
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
evidece_type
input$prev
c(mean=input$prev[1]/100, upper_ci=input$prev[2]/100)
c(mean=input$cstat[1], upper_ci=input$cstat[2])
c(mean=input$cal_intercept/1, sd=input$cal_intercept_sd/1)
c(mean=input$cal_slope/1, sd=input$cal_slope_sd/1)
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
evidence
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
evidence$params$prev
evidence$params$stat
evidence$params$cstat
evidence$params$cs
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
samples
runApp('C:/Users/msafavi/static/GitRepos/EVSIExVal/shiny')
EVSIExval:::CEVSI
runApp()
EVSIExval:::CEVSI()
EVSIExval:::CEVSI
devtools::document()
library(EVSIExval)
runApp()
devtools::document()
library(EVSIExval)
runApp()
devtools::document()
EVSIExval::CEVSI
EVSIExval::CEVSI(rbin(1000))
EVSIExval::CEVSI(runif(1000))
EVSIExval::CEVSI(runif(1000),0.02)
EVSIExval::CEVSI(runif(1000),0.02,500)
EVSIExval::CEVSI(runif(1000),0.02,500,10)
Rcpp::sourceCpp("C:/Users/msafavi/static/GitRepos/EVSIExVal/src/EVSI.cpp")
Rcpp::sourceCpp("C:/Users/msafavi/static/GitRepos/EVSIExVal/src/EVSI.cpp")
Rcpp::sourceCpp("C:/Users/msafavi/static/GitRepos/EVSIExVal/src/EVSI.cpp")
Rcpp::sourceCpp("C:/Users/msafavi/static/GitRepos/EVSIExVal/src/EVSI.cpp")
library(EVSIExval)
EVSIExval::CEVSI(runif(1000),0.02,500,10)
document()
Rcpp::Rcpp.package.skeleton()
devtools::document()
library(EVSIExval)
EVSIExval::CEVSI(runif(1000),0.02,500,10)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
library(EVSIExval)
EVSIExval::CEVSI(runif(1000),0.02,500,10)
devtools::document()
library(EVSIExval)
EVSIExval::CEVSI(runif(1000),0.02,500,10)
library(EVSIExval)
CEVSI(runif(1000),0.02,500,10)
CEVSI
Rcpp::compileAttributes()
Rcpp::sourceCpp("src/EVSI.cpp")
Rcpp::compileAttributes()
devtools::document()
library(EVSIExval)
CEVSI(runif(1000),0.02,500,10)
CEVSI(runif(1000),0.02,500,10)
EVSIExval:::.__S3MethodsTable__.
EVSIExval:::EVSI_gf
EVSIExval:::CEVSI
devtools::document()
library(EVSIExval)
CEVSI(runif(1000),0.02,500,10)
.Call(`_EVSIExval_CEVSI`, samples, z, futureSampleSizes, nSim, debug)
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
VoI
runApp('shiny')
runApp('shiny')
runApp('shiny')
library(EVSIExval)
res_gf <- EVSI_gf(as.matrix(samples[,1:3]), z, c(500,1000,2000,4000,8000,16000), 100)
Rcpp.package.skeleton()
Rcpp::package.skeleton()
?Rcpp.package.skeleton()
Rcpp.package.skeleto
Rcpp.package.skeleton()
library(Rcpp)
Rcpp.package.skeleton()
devtools::check()
devtools::document()
remove.packages("EVSIExVal")
library(EVSIExval)
res_gf <- EVSI_gf(as.matrix(samples[,1:3]), z, c(500,1000,2000,4000,8000,16000), 100)
Rcpp.package.skeleton()
library(Rcpp)
Rcpp.package.skeleton()
getwd()
setwd("C:/Users/msafavi/static/GitRepos")
Rcpp.package.skeleton()
setwd("C:/Users/msafavi/static/GitRepos/anRpackage")
usethis::create_package()
usethis::create_package(here())
usethis::create_package(getwd())
devtools::document()
devtools::document()
setwd("C:/Users/msafavi/static/GitRepos/EVSIExVal")
devtools::document()
devtools::document()
library(EVSIExval)
res_gf <- EVSI_gf(as.matrix(samples[,1:3]), z, c(500,1000,2000,4000,8000,16000), 100)
res_gf <- EVSIExval::EVSI_gf(as.matrix(samples[,1:3]), z, c(500,1000,2000,4000,8000,16000), 100)
devtools::document()
remove.packages("EVSIExVal")
remove.packages("EVSIExVal")
detach("pkg:EVSIExVal")
?detach("pkg:EVSIExVal")
?detach("package:EVSIExVal")
detach("package:EVSIExVal")
detach("package:EVSIExVal", character.only = T)
detach(package:EVSIExVal)
detach(package:splines)
shiny::runApp('shiny')
remove.packages("EVSIexVal")
;lk;lk
library(EVSIExval)
devtools::install_github("https://github.com/resplab/EVSIExVal")
devtools::install_github("https://github.com/resplab/EVSIExVal", auth_token = "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")
devtools::install_github("https://github.com/resplab/EVSIExVal", auth_token = "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")
devtools::install_github("https://github.com/resplab/EVSIExVal", auth_token = "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")
library(EVSIExval)
EVSIExval::EVSI_gf()
library(EVSIExval)
devtools::document()
library(EVSIExval)
EVSIExval:::CEVSI
library(EVSIExval)
EVSIExval:::CEVSI
EVSIExval:::CEVSI()
devtools::document()
unloadNamespace("EVSIExVal")
unloadNamespace("EVSIExVal")
library(EVSIExval)
EVSIExval::CEVSI()
EVSIExval:::CEVSI()
devt
devtools::document()
remove.package
remove.packages
remove.packages("EVSIExVal")
remove.packages("EVSIExVal")
library(evsiexval)
shiny::runApp('shiny')
evidence
n_sim_outer
n_sim_inner
evidence$params
n_stars
VoI
z
EVSI_ag
EVSI_ag()
EVSI_ag(z=0.5)
EVSI_ag(z=0.5, future_sample_sizes = 500, n_sim = )
EVSI_ag(z=0.5, future_sample_sizes = 500, n_sim=1)
EVSI_ag(z=0.5, future_sample_sizes = 500, n_sim=2)
runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
runApp('shiny')
runApp('shiny')
global_vars$evidence_type
runApp('shiny')
runApp('shiny')
runApp('shiny')
library(evsiexval)
shiny::runApp('shiny')
runApp('shiny')
cur_NBs
shiny::runApp('shiny')
library(evsiexval)
runApp('shiny')
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
dim(pop_data)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
library(evsiexval)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
cur_NB_CIs
shiny::runApp('shiny')
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
t(cur_NB_CIs)
p_best
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
cur_NBs
cur_NBs <- cbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs <- rbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs
cur_NBs <- cbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs
cur_NBs <- cbind("Treat none"=0,
mean("Use model"=true_NBs[,2]),
mean("Treat all"=true_NBs[,3])
)
cbind("Treat none"=0,
mean("Use model"=true_NBs[,2]),
mean("Treat all"=true_NBs[,3])
)
true_NBs
colMeans(true_NBs)
cur_NBs <- colMeans(true_NBs)
cur_NBs
rbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs <- rbind(cur_NBs, apply(true_NBs, 2, quantile, c(0.025,0.975)))
cur_NBs
p_best <- table(apply(true_NBs,1,which.max))/nrow(true_NBs)
p_best
cur_NBs[nrow("cur_NBs")+1,] <- 0
cur_NBs
nrow("cur_NBs")
cur_NBs[nrow(cur_NBs)+1,] <- 0
library(evsiexval)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
library(evsiexval)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
future_sample_sizes <- c(500,1000,2000,4000,8000,16000)
set.seed(1)
z=0.01
evidence <- list(prev = c(43L, 457L), se = c(43L, 0L), sp = c(65, 392))
res_a <- EVSI_ag(evidence, z, future_sample_sizes, 10^6)
x <- data.frame(prev=rbeta(1000,evidence$prev[1]+1,evidence$prev[2]+1),se=rbeta(1000,evidence$se[1]+1,evidence$se[2]+1),sp=rbeta(1000,evidence$sp[1]+1,evidence$sp[2]+1))
shiny::runApp('shiny')
shiny::runApp('shiny')
runApp('shiny')
shiny::runApp('shiny')
?removeUI
runApp('shiny')
runApp('shiny')
runApp('shiny')
observeEvent(input$prev, input$se, input$sp, {
if(global_vars$evidence_type=="ind_beta")
{
a <- input$prev/100*input$prev_n
b <- input$prev_n-input$prev/100*input$prev_n
output$prev_dist <- renderText(paste0("prev~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
a <- input$se/100*input$se_n
b <- input$se_n-input$se/100*input$se_n
output$se_dist <- renderText(paste0("se~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
a <- input$sp/100*input$sp_n
b <- input$sp_n-input$sp/100*input$prev_n
output$sp_dist <- renderText(paste0("sp~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
}
})
runApp('shiny')
a
b
input$se
output$se_dist
output$
;
renderText(paste0("sp~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))
renderText(paste0("sp~Beta(", a,",", b ,") | ", make95CrIFromBeta(a,b)))()
output$prev_dist
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
global_vars$evidence_type
input$prev
?try
runApp('shiny')
runApp('shiny')
runApp('shiny')
input$
cstat
runApp('shiny')
runApp('shiny')
global_vars$evidence
global_vars$evidence_type
input$prev
input$prev
global_vars$evidence_type
runApp('shiny')
runApp('shiny')
runApp('shiny')
global_vars$oe
global_vars$oe$destroy()
global_vars$oe$destroy()
global_vars$oe$destroy()
global_vars$oe$.domain
global_vars$oe$.suspended
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
